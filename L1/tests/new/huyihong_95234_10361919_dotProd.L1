// Computes dot product of two vectors of <input> length of form 
// [-1,1,3,...] and [0, 2, 4,...]
(:go
    (:dotProd
        1 3
        mem rsp 0 <- rbx
        mem rsp 8 <- rbp
        mem rsp 16 <- r12

        r12 <- rdi                      //r11 int len
                    
        rdi <<= 1                       //odd %rbx = malloc(%rdi, 0)
        rdi += 1
        rsi <- 0 
        call allocate 2
        rbx <- rax

        rdi <- r12                      //even %rbp = malloc(%rdi, 0)
        rdi <<= 1
        rdi += 1
        rsi <- 0
        call allocate 2
        rbp <- rax
                                                    //for (int i = 0; i < len; i++)
        r10 <-  0                                   //r10 caller saved, int i
        :loop1_begin
        cjump r12 <= r10  :loop1_exit               // rdi arg <= 2

        r9 <- r10
        r9 += 1

        r8 <- r10                                   // odd[i] = 2 * i - 1;
        r8 *= 2
        r8 -= 1

        rcx @ rbx r9 8                              // %rcx = %rbx + 8 * (i + 1) one more space at the beginning of allocate array
        mem rcx 0 <- r8                                  
                                                    
        r8 <- r10                                   // even[i] = 2 * i;
        r8 *= 2

        rcx @ rbp r9 8                              // %rcx = %rbp + 8 * (i + 1) one more space at the beginning of allocate array
        mem rcx 0 <- r8

        r10 += 1
        goto :loop1_begin
        :loop1_exit
        
        //rdi <- rbx
        //call print 1
        //rdi <- rbp
        //call print 1

        rax <- 0

                                                    //for (int i = 0; i < len; i++)
        r10 <-  0                                   //r10 caller saved, int i
        :loop2_begin
        cjump r12 <= r10  :loop2_exit               // rdi arg <= 2

        r9 <- r10
        r9 += 1

        rcx @ rbx r9 8                              // rax += odd[i] * even[i]
        r8 <- mem rcx 0                                  
        rcx @ rbp r9 8                              
        r8 *= mem rcx 0
        
        rax += r8
        
        r10 += 1
        goto :loop2_begin
        :loop2_exit

        :done
        rbx <- mem rsp 0  
        rbp <- mem rsp 8
        r12 <- mem rsp 16   
        return    
    )

    (:go
        0 0
        rdi <- 11   
        mem rsp -8 <- :dotProd_finish
        call :dotProd 1
        :dotProd_finish

        rdi <- rax
        rdi <<= 1
        rdi += 1
        call print 1
        
        rax <- 0
        return
    )
)