(:entrance
    (:entrance
    0 0
// length of array (encoded integer)
    rdi <- 41
// initial value of each element (encoded int)
    rsi <- 3
// number to modify elements to (encoded int)
    rdx <- 41
// number of elements to modify (encoded int)
    rcx <- 5
// set up call stack
    mem rsp -8 <- :create_arr_ret
    call :create_arr 4
    :create_arr_ret 
    return
    )
    (:create_arr
    4 0
// save 3rd and 4th arg onto stack
    mem rsp -8 <- rdx
    mem rsp -16 <- rcx
    rsp -= 16
// call library function
    call allocate 2
// pop 3rd and 4th arg from stack
    rdx <- mem rsp +8
    rcx <- mem rsp 0
    rsp += 16
// loop through the first 5 elements of the array
    :loop
    cjump rcx <= 0 :loopexit
    rdi @ rax rcx 8
    mem rdi 0 <- rdx
    rcx -= 1 
    goto :loop
    :loopexit
// print array and save rax onto stack
    mem rsp -8 <- rax
    rsp -= 8
    rdi <- rax
    call print 1
// restore value of rax into rdi
    rdi <- mem rsp 0
    rsp += 8
    mem rsp -8 <- :sq_arr_return
    call :sq_arr_length 1
    :sq_arr_return
    return
    )
    (:sq_arr_length
    1 0
// get length of arr
    rsi <- mem rdi 0
// sq array length
    rsi *= rsi
// encode the sq value
    rsi *= 2
    rsi += 1
// print sq value
    rdi <- rsi
    call print 1
    return
    )
)
