(:go
    (:go        
0
        rdi <- 11
        rsi <- 5
        call allocate 2
%variablePZT0BGUGH1 <- rax
        %pointer <- rax
        %pointer += 8
        mem %pointer 0 <- 3
        %pointer += 8
        mem %pointer 0 <- 5
        %pointer += 8
        mem %pointer 0 <- 7
        %pointer += 8
        mem %pointer 0 <- 9
        %pointer += 8
        mem %pointer 0 <- 11
rdi <- %variablePZT0BGUGH1

        mem rsp -8 <- :f_ret
        call :reverse_array 1
        :f_ret

        rdi <- rax
        call print 1
        return)

    (:reverse_array
1
%variableNX1SQT52TY <- r12
%variable9BOW39KDNW <- r13
        r12 <- mem rdi 0 //size of input array
        r13 <- rdi

        rdi <- r12
        mem rsp -8 <- :encode_ret
        call :encode 1
        :encode_ret
        rdi <- rax
        rsi <- 0
        call allocate 2 // allocate second array with same size and init with zero

        rcx @ rax r12 8

        %ptr <- r13
        :loop
        %ptr += 8
        cjump r12 = 0 :finish 
goto :cont


        :cont
        rdi <- mem %ptr 0
        mem rcx 0 <- rdi
        r12 -= 1
        rcx -= 8
        goto :loop

        :finish
r12 <- %variableNX1SQT52TY
r13 <- %variable9BOW39KDNW
        return)

    (:encode
1
        rax <- rdi
        rax <<= 1
        rax += 1
        return))