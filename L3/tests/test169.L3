define :vec_ctor () {
 
:entry
 %res <- call allocate (7, 1)
 %newVar1 <- 0 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %res + %newVar0
 store %newVar2 <- 0
 %newVar4 <- 1 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %res + %newVar3
 store %newVar5 <- 1
 %newVar7 <- 5 >> 1
 %newVar6 <- %newVar7
 %newVar8 <- 5 >> 1
 %newVar6 <- %newVar6 * %newVar8
 %newVar6 <- %newVar6 << 1
 %newVar6 <- %newVar6 + 1
 %newVar6 <- %newVar6 + 6
 %buf <- call allocate (%newVar6, 1)
 %newVar9 <- %buf + 8
 store %newVar9 <- 5
 %newVar10 <- %buf + 16
 store %newVar10 <- 5
 %newVar11 <- %buf + 24
 store %newVar11 <- 5
 %newVar13 <- 2 * 8
 %newVar12 <- %newVar13 + 8
 %newVar14 <- %res + %newVar12
 store %newVar14 <- %buf
 return %res
}

define :memcp32 (%ptr, %idx, %buf) {
 
:entry
 %newVar1 <- 0
 %newVar2 <- %ptr + 24
 %newVar3 <- load %newVar2
 %newVar4 <- %newVar3 >> 1
 %newVar5 <- %ptr + 32
 %newVar6 <- load %newVar5
 %newVar7 <- %newVar6 >> 1
 %newVar8 <- 1
 %newVar8 <- %newVar7 * %newVar8
 %newVar9 <- 0 * %newVar8
 %newVar1 <- %newVar9 + %newVar1
 %newVar8 <- %newVar4 * %newVar8
 %newVar10 <- %idx * %newVar8
 %newVar1 <- %newVar10 + %newVar1
 %newVar1 <- %newVar1 + 0
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 40
 %newVar11 <- %ptr + %newVar0
 %n <- load %newVar11
 %newVar13 <- 0
 %newVar14 <- %buf + 24
 %newVar15 <- load %newVar14
 %newVar16 <- %newVar15 >> 1
 %newVar17 <- 1
 %newVar17 <- %newVar16 * %newVar17
 %newVar18 <- 0 * %newVar17
 %newVar13 <- %newVar18 + %newVar13
 %newVar13 <- %newVar13 + 0
 %newVar12 <- %newVar13 * 8
 %newVar12 <- %newVar12 + 32
 %newVar19 <- %buf + %newVar12
 store %newVar19 <- %n
 %newVar21 <- 0
 %newVar22 <- %ptr + 24
 %newVar23 <- load %newVar22
 %newVar24 <- %newVar23 >> 1
 %newVar25 <- %ptr + 32
 %newVar26 <- load %newVar25
 %newVar27 <- %newVar26 >> 1
 %newVar28 <- 1
 %newVar28 <- %newVar27 * %newVar28
 %newVar29 <- 0 * %newVar28
 %newVar21 <- %newVar29 + %newVar21
 %newVar28 <- %newVar24 * %newVar28
 %newVar30 <- %idx * %newVar28
 %newVar21 <- %newVar30 + %newVar21
 %newVar21 <- %newVar21 + 1
 %newVar20 <- %newVar21 * 8
 %newVar20 <- %newVar20 + 40
 %newVar31 <- %ptr + %newVar20
 %n <- load %newVar31
 %newVar33 <- 0
 %newVar34 <- %buf + 24
 %newVar35 <- load %newVar34
 %newVar36 <- %newVar35 >> 1
 %newVar37 <- 1
 %newVar37 <- %newVar36 * %newVar37
 %newVar38 <- 0 * %newVar37
 %newVar33 <- %newVar38 + %newVar33
 %newVar33 <- %newVar33 + 1
 %newVar32 <- %newVar33 * 8
 %newVar32 <- %newVar32 + 32
 %newVar39 <- %buf + %newVar32
 store %newVar39 <- %n
 %newVar41 <- 0
 %newVar42 <- %ptr + 24
 %newVar43 <- load %newVar42
 %newVar44 <- %newVar43 >> 1
 %newVar45 <- %ptr + 32
 %newVar46 <- load %newVar45
 %newVar47 <- %newVar46 >> 1
 %newVar48 <- 1
 %newVar48 <- %newVar47 * %newVar48
 %newVar49 <- 1 * %newVar48
 %newVar41 <- %newVar49 + %newVar41
 %newVar48 <- %newVar44 * %newVar48
 %newVar50 <- %idx * %newVar48
 %newVar41 <- %newVar50 + %newVar41
 %newVar41 <- %newVar41 + 0
 %newVar40 <- %newVar41 * 8
 %newVar40 <- %newVar40 + 40
 %newVar51 <- %ptr + %newVar40
 %n <- load %newVar51
 %newVar53 <- 0
 %newVar54 <- %buf + 24
 %newVar55 <- load %newVar54
 %newVar56 <- %newVar55 >> 1
 %newVar57 <- 1
 %newVar57 <- %newVar56 * %newVar57
 %newVar58 <- 1 * %newVar57
 %newVar53 <- %newVar58 + %newVar53
 %newVar53 <- %newVar53 + 0
 %newVar52 <- %newVar53 * 8
 %newVar52 <- %newVar52 + 32
 %newVar59 <- %buf + %newVar52
 store %newVar59 <- %n
 %newVar61 <- 0
 %newVar62 <- %ptr + 24
 %newVar63 <- load %newVar62
 %newVar64 <- %newVar63 >> 1
 %newVar65 <- %ptr + 32
 %newVar66 <- load %newVar65
 %newVar67 <- %newVar66 >> 1
 %newVar68 <- 1
 %newVar68 <- %newVar67 * %newVar68
 %newVar69 <- 1 * %newVar68
 %newVar61 <- %newVar69 + %newVar61
 %newVar68 <- %newVar64 * %newVar68
 %newVar70 <- %idx * %newVar68
 %newVar61 <- %newVar70 + %newVar61
 %newVar61 <- %newVar61 + 1
 %newVar60 <- %newVar61 * 8
 %newVar60 <- %newVar60 + 40
 %newVar71 <- %ptr + %newVar60
 %n <- load %newVar71
 %newVar73 <- 0
 %newVar74 <- %buf + 24
 %newVar75 <- load %newVar74
 %newVar76 <- %newVar75 >> 1
 %newVar77 <- 1
 %newVar77 <- %newVar76 * %newVar77
 %newVar78 <- 1 * %newVar77
 %newVar73 <- %newVar78 + %newVar73
 %newVar73 <- %newVar73 + 1
 %newVar72 <- %newVar73 * 8
 %newVar72 <- %newVar72 + 32
 %newVar79 <- %buf + %newVar72
 store %newVar79 <- %n
 return 
}

define :memcp23 (%buf, %qtr, %idx) {
 
:entry
 %newVar1 <- 0
 %newVar2 <- %buf + 24
 %newVar3 <- load %newVar2
 %newVar4 <- %newVar3 >> 1
 %newVar5 <- 1
 %newVar5 <- %newVar4 * %newVar5
 %newVar6 <- 0 * %newVar5
 %newVar1 <- %newVar6 + %newVar1
 %newVar1 <- %newVar1 + 0
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 32
 %newVar7 <- %buf + %newVar0
 %n <- load %newVar7
 %newVar9 <- 0
 %newVar10 <- %qtr + 24
 %newVar11 <- load %newVar10
 %newVar12 <- %newVar11 >> 1
 %newVar13 <- %qtr + 32
 %newVar14 <- load %newVar13
 %newVar15 <- %newVar14 >> 1
 %newVar16 <- 1
 %newVar16 <- %newVar15 * %newVar16
 %newVar17 <- 0 * %newVar16
 %newVar9 <- %newVar17 + %newVar9
 %newVar16 <- %newVar12 * %newVar16
 %newVar18 <- %idx * %newVar16
 %newVar9 <- %newVar18 + %newVar9
 %newVar9 <- %newVar9 + 0
 %newVar8 <- %newVar9 * 8
 %newVar8 <- %newVar8 + 40
 %newVar19 <- %qtr + %newVar8
 store %newVar19 <- %n
 %newVar21 <- 0
 %newVar22 <- %buf + 24
 %newVar23 <- load %newVar22
 %newVar24 <- %newVar23 >> 1
 %newVar25 <- 1
 %newVar25 <- %newVar24 * %newVar25
 %newVar26 <- 0 * %newVar25
 %newVar21 <- %newVar26 + %newVar21
 %newVar21 <- %newVar21 + 1
 %newVar20 <- %newVar21 * 8
 %newVar20 <- %newVar20 + 32
 %newVar27 <- %buf + %newVar20
 %n <- load %newVar27
 %newVar29 <- 0
 %newVar30 <- %qtr + 24
 %newVar31 <- load %newVar30
 %newVar32 <- %newVar31 >> 1
 %newVar33 <- %qtr + 32
 %newVar34 <- load %newVar33
 %newVar35 <- %newVar34 >> 1
 %newVar36 <- 1
 %newVar36 <- %newVar35 * %newVar36
 %newVar37 <- 0 * %newVar36
 %newVar29 <- %newVar37 + %newVar29
 %newVar36 <- %newVar32 * %newVar36
 %newVar38 <- %idx * %newVar36
 %newVar29 <- %newVar38 + %newVar29
 %newVar29 <- %newVar29 + 1
 %newVar28 <- %newVar29 * 8
 %newVar28 <- %newVar28 + 40
 %newVar39 <- %qtr + %newVar28
 store %newVar39 <- %n
 %newVar41 <- 0
 %newVar42 <- %buf + 24
 %newVar43 <- load %newVar42
 %newVar44 <- %newVar43 >> 1
 %newVar45 <- 1
 %newVar45 <- %newVar44 * %newVar45
 %newVar46 <- 1 * %newVar45
 %newVar41 <- %newVar46 + %newVar41
 %newVar41 <- %newVar41 + 0
 %newVar40 <- %newVar41 * 8
 %newVar40 <- %newVar40 + 32
 %newVar47 <- %buf + %newVar40
 %n <- load %newVar47
 %newVar49 <- 0
 %newVar50 <- %qtr + 24
 %newVar51 <- load %newVar50
 %newVar52 <- %newVar51 >> 1
 %newVar53 <- %qtr + 32
 %newVar54 <- load %newVar53
 %newVar55 <- %newVar54 >> 1
 %newVar56 <- 1
 %newVar56 <- %newVar55 * %newVar56
 %newVar57 <- 1 * %newVar56
 %newVar49 <- %newVar57 + %newVar49
 %newVar56 <- %newVar52 * %newVar56
 %newVar58 <- %idx * %newVar56
 %newVar49 <- %newVar58 + %newVar49
 %newVar49 <- %newVar49 + 0
 %newVar48 <- %newVar49 * 8
 %newVar48 <- %newVar48 + 40
 %newVar59 <- %qtr + %newVar48
 store %newVar59 <- %n
 %newVar61 <- 0
 %newVar62 <- %buf + 24
 %newVar63 <- load %newVar62
 %newVar64 <- %newVar63 >> 1
 %newVar65 <- 1
 %newVar65 <- %newVar64 * %newVar65
 %newVar66 <- 1 * %newVar65
 %newVar61 <- %newVar66 + %newVar61
 %newVar61 <- %newVar61 + 1
 %newVar60 <- %newVar61 * 8
 %newVar60 <- %newVar60 + 32
 %newVar67 <- %buf + %newVar60
 %n <- load %newVar67
 %newVar69 <- 0
 %newVar70 <- %qtr + 24
 %newVar71 <- load %newVar70
 %newVar72 <- %newVar71 >> 1
 %newVar73 <- %qtr + 32
 %newVar74 <- load %newVar73
 %newVar75 <- %newVar74 >> 1
 %newVar76 <- 1
 %newVar76 <- %newVar75 * %newVar76
 %newVar77 <- 1 * %newVar76
 %newVar69 <- %newVar77 + %newVar69
 %newVar76 <- %newVar72 * %newVar76
 %newVar78 <- %idx * %newVar76
 %newVar69 <- %newVar78 + %newVar69
 %newVar69 <- %newVar69 + 1
 %newVar68 <- %newVar69 * 8
 %newVar68 <- %newVar68 + 40
 %newVar79 <- %qtr + %newVar68
 store %newVar79 <- %n
 return 
}

define :vec_do_push_back (%vec, %new_val) {
 
:entry
 %newVar1 <- 0 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %vec + %newVar0
 %size <- load %newVar2
 %newVar4 <- 1 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %vec + %newVar3
 %ptr <- load %newVar5
 call :memcp23 (%new_val, %ptr, %size)
 %new_size <- %size + 1
 %newVar7 <- 0 * 8
 %newVar6 <- %newVar7 + 8
 %newVar8 <- %vec + %newVar6
 store %newVar8 <- %new_size
 return 
}

define :vec_push_back_alloc (%vec) {
 
:entry
 %newVar1 <- 1 * 8
 %newVar0 <- %newVar1 + 8
 %newVar2 <- %vec + %newVar0
 %ptr <- load %newVar2
 %is_empty <- %ptr & 1
 br %is_empty :alloc_new 
 br :check_length
 
:check_length
 %newVar4 <- 0 * 8
 %newVar3 <- %newVar4 + 8
 %newVar5 <- %vec + %newVar3
 %size <- load %newVar5
 %newVar6 <- 0 * 8
 %newVar7 <- %newVar6 + 16
 %newVar8 <- %ptr + %newVar7
 %capacity <- load %newVar8
 %len <- %capacity >> 1
 %is_full <- %size = %len
 br %is_full :extend 
 br :has_space_left
 
:has_space_left
 return 
 
:extend
 %tiida <- %capacity >> 1
 %tiida <- %tiida << 1
 %tiida <- %tiida << 1
 %tiida <- %tiida + 1
 %newVar10 <- %tiida >> 1
 %newVar9 <- %newVar10
 %newVar11 <- 5 >> 1
 %newVar9 <- %newVar9 * %newVar11
 %newVar12 <- 5 >> 1
 %newVar9 <- %newVar9 * %newVar12
 %newVar9 <- %newVar9 << 1
 %newVar9 <- %newVar9 + 1
 %newVar9 <- %newVar9 + 8
 %qtr <- call allocate (%newVar9, 1)
 %newVar13 <- %qtr + 8
 store %newVar13 <- 7
 %newVar14 <- %qtr + 16
 store %newVar14 <- %tiida
 %newVar15 <- %qtr + 24
 store %newVar15 <- 5
 %newVar16 <- %qtr + 32
 store %newVar16 <- 5
 %i <- 0
 %N <- %capacity >> 1
 br :copy
 
:copy
 %icmp <- %i < %N
 br %icmp :do 
 br :finish
 
:do
 %newVar18 <- 2 * 8
 %newVar17 <- %newVar18 + 8
 %newVar19 <- %vec + %newVar17
 %buf <- load %newVar19
 call :memcp32 (%ptr, %i, %buf)
 call :memcp23 (%buf, %qtr, %i)
 br :inc
 
:inc
 %i <- %i + 1
 br :copy
 
:finish
 %newVar21 <- 1 * 8
 %newVar20 <- %newVar21 + 8
 %newVar22 <- %vec + %newVar20
 store %newVar22 <- %qtr
 return 
 
:alloc_new
 %newVar24 <- 3 >> 1
 %newVar23 <- %newVar24
 %newVar25 <- 5 >> 1
 %newVar23 <- %newVar23 * %newVar25
 %newVar26 <- 5 >> 1
 %newVar23 <- %newVar23 * %newVar26
 %newVar23 <- %newVar23 << 1
 %newVar23 <- %newVar23 + 1
 %newVar23 <- %newVar23 + 8
 %arr <- call allocate (%newVar23, 1)
 %newVar27 <- %arr + 8
 store %newVar27 <- 7
 %newVar28 <- %arr + 16
 store %newVar28 <- 3
 %newVar29 <- %arr + 24
 store %newVar29 <- 5
 %newVar30 <- %arr + 32
 store %newVar30 <- 5
 %newVar32 <- 1 * 8
 %newVar31 <- %newVar32 + 8
 %newVar33 <- %vec + %newVar31
 store %newVar33 <- %arr
 return 
}

define :main () {
 
:entry
 br :B1
 
:B1
 %printing_buf <- call allocate (5, 1)
 %vec <- call :vec_ctor ()
 %i <- 0
 %N <- 300000000
 %newVar1 <- 5 >> 1
 %newVar0 <- %newVar1
 %newVar2 <- 5 >> 1
 %newVar0 <- %newVar0 * %newVar2
 %newVar0 <- %newVar0 << 1
 %newVar0 <- %newVar0 + 1
 %newVar0 <- %newVar0 + 6
 %mat <- call allocate (%newVar0, 1)
 %newVar3 <- %mat + 8
 store %newVar3 <- 5
 %newVar4 <- %mat + 16
 store %newVar4 <- 5
 %newVar5 <- %mat + 24
 store %newVar5 <- 5
 call :initmat (%mat)
 br :B2
 
:B2
 %i <- 1 + %i
 %icmp <- %i > %N
 %icmp <- 1 - %icmp
 br %icmp :B3 
 br :B6
 
:B3
 %icmp <- %i <= 10
 br %icmp :B5 
 br :B3_5
 
:B3_5
 %j <- %i - 1
 %resid <- %j & 33554431
 %notresid <- 1 - %resid
 br %notresid :B5 
 br :B4
 
:B4
 call :nextfib (%mat)
 %resid <- %j & 2097151
 %icmp <- %resid = 0
 br %icmp :save 
 br :B2
 
:save
 call :vec_push_back_alloc (%vec)
 call :vec_do_push_back (%vec, %mat)
 %newVar7 <- 0 * 8
 %newVar6 <- %newVar7 + 8
 %newVar8 <- %vec + %newVar6
 %size <- load %newVar8
 %size <- %size << 1
 %size <- %size + 1
 %newVar10 <- 0 * 8
 %newVar9 <- %newVar10 + 8
 %newVar11 <- %printing_buf + %newVar9
 store %newVar11 <- %size
 %newVar13 <- 1 * 8
 %newVar12 <- %newVar13 + 8
 %newVar14 <- %vec + %newVar12
 %ptr <- load %newVar14
 %newVar15 <- 0 * 8
 %newVar16 <- %newVar15 + 16
 %newVar17 <- %ptr + %newVar16
 %capacity <- load %newVar17
 %newVar19 <- 1 * 8
 %newVar18 <- %newVar19 + 8
 %newVar20 <- %printing_buf + %newVar18
 store %newVar20 <- %capacity
 call print (%printing_buf)
 br :B2
 
:B5
 %enci <- %i * 2
 %enci <- %enci + 1
 call print (%enci)
 call print (%mat)
 br :B4
 
:B6
 %newVar22 <- 1 * 8
 %newVar21 <- %newVar22 + 8
 %newVar23 <- %vec + %newVar21
 %data <- load %newVar23
 call print (%data)
 return 
}

define :initmat (%mat) {
 
:entry
 br :B1
 
:B1
 %newVar1 <- 0
 %newVar2 <- %mat + 24
 %newVar3 <- load %newVar2
 %newVar4 <- %newVar3 >> 1
 %newVar5 <- 1
 %newVar5 <- %newVar4 * %newVar5
 %newVar6 <- 0 * %newVar5
 %newVar1 <- %newVar6 + %newVar1
 %newVar1 <- %newVar1 + 0
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 32
 %newVar7 <- %mat + %newVar0
 store %newVar7 <- 1
 %newVar9 <- 0
 %newVar10 <- %mat + 24
 %newVar11 <- load %newVar10
 %newVar12 <- %newVar11 >> 1
 %newVar13 <- 1
 %newVar13 <- %newVar12 * %newVar13
 %newVar14 <- 0 * %newVar13
 %newVar9 <- %newVar14 + %newVar9
 %newVar9 <- %newVar9 + 1
 %newVar8 <- %newVar9 * 8
 %newVar8 <- %newVar8 + 32
 %newVar15 <- %mat + %newVar8
 store %newVar15 <- 3
 %newVar17 <- 0
 %newVar18 <- %mat + 24
 %newVar19 <- load %newVar18
 %newVar20 <- %newVar19 >> 1
 %newVar21 <- 1
 %newVar21 <- %newVar20 * %newVar21
 %newVar22 <- 1 * %newVar21
 %newVar17 <- %newVar22 + %newVar17
 %newVar17 <- %newVar17 + 0
 %newVar16 <- %newVar17 * 8
 %newVar16 <- %newVar16 + 32
 %newVar23 <- %mat + %newVar16
 store %newVar23 <- 3
 %newVar25 <- 0
 %newVar26 <- %mat + 24
 %newVar27 <- load %newVar26
 %newVar28 <- %newVar27 >> 1
 %newVar29 <- 1
 %newVar29 <- %newVar28 * %newVar29
 %newVar30 <- 1 * %newVar29
 %newVar25 <- %newVar30 + %newVar25
 %newVar25 <- %newVar25 + 1
 %newVar24 <- %newVar25 * 8
 %newVar24 <- %newVar24 + 32
 %newVar31 <- %mat + %newVar24
 store %newVar31 <- 3
 return 
}

define :mod10000 (%n) {
 
:entry
 %icmp <- %n >= 20000
 br %icmp :mod 
 br :nothing
 
:nothing
 return %n
 
:mod
 %n <- %n - 20000
 %n <- call :mod10000 (%n)
 return %n
}

define :nextfib (%acc) {
 
:entry
 br :B1
 
:B2
 %B00 <- 0
 %B01 <- 1
 %B10 <- 1
 %B11 <- 1
 br :B3
 
:B1
 %newVar1 <- 0
 %newVar2 <- %acc + 24
 %newVar3 <- load %newVar2
 %newVar4 <- %newVar3 >> 1
 %newVar5 <- 1
 %newVar5 <- %newVar4 * %newVar5
 %newVar6 <- 0 * %newVar5
 %newVar1 <- %newVar6 + %newVar1
 %newVar1 <- %newVar1 + 0
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 32
 %newVar7 <- %acc + %newVar0
 %A00 <- load %newVar7
 %newVar9 <- 0
 %newVar10 <- %acc + 24
 %newVar11 <- load %newVar10
 %newVar12 <- %newVar11 >> 1
 %newVar13 <- 1
 %newVar13 <- %newVar12 * %newVar13
 %newVar14 <- 0 * %newVar13
 %newVar9 <- %newVar14 + %newVar9
 %newVar9 <- %newVar9 + 1
 %newVar8 <- %newVar9 * 8
 %newVar8 <- %newVar8 + 32
 %newVar15 <- %acc + %newVar8
 %A01 <- load %newVar15
 %newVar17 <- 0
 %newVar18 <- %acc + 24
 %newVar19 <- load %newVar18
 %newVar20 <- %newVar19 >> 1
 %newVar21 <- 1
 %newVar21 <- %newVar20 * %newVar21
 %newVar22 <- 1 * %newVar21
 %newVar17 <- %newVar22 + %newVar17
 %newVar17 <- %newVar17 + 0
 %newVar16 <- %newVar17 * 8
 %newVar16 <- %newVar16 + 32
 %newVar23 <- %acc + %newVar16
 %A10 <- load %newVar23
 %newVar25 <- 0
 %newVar26 <- %acc + 24
 %newVar27 <- load %newVar26
 %newVar28 <- %newVar27 >> 1
 %newVar29 <- 1
 %newVar29 <- %newVar28 * %newVar29
 %newVar30 <- 1 * %newVar29
 %newVar25 <- %newVar30 + %newVar25
 %newVar25 <- %newVar25 + 1
 %newVar24 <- %newVar25 * 8
 %newVar24 <- %newVar24 + 32
 %newVar31 <- %acc + %newVar24
 %A11 <- load %newVar31
 %A00 <- %A00 - 1
 %A01 <- %A01 - 1
 %A10 <- %A10 - 1
 %A11 <- %A11 - 1
 br :B2
 
:Bend
 %n00 <- %n00 + 1
 %n01 <- %n01 + 1
 %n10 <- %n10 + 1
 %n11 <- %n11 + 1
 %n00 <- call :mod10000 (%n00)
 %n01 <- call :mod10000 (%n10)
 %n10 <- call :mod10000 (%n10)
 %n11 <- call :mod10000 (%n11)
 %newVar33 <- 0
 %newVar34 <- %acc + 24
 %newVar35 <- load %newVar34
 %newVar36 <- %newVar35 >> 1
 %newVar37 <- 1
 %newVar37 <- %newVar36 * %newVar37
 %newVar38 <- 0 * %newVar37
 %newVar33 <- %newVar38 + %newVar33
 %newVar33 <- %newVar33 + 0
 %newVar32 <- %newVar33 * 8
 %newVar32 <- %newVar32 + 32
 %newVar39 <- %acc + %newVar32
 store %newVar39 <- %n00
 %newVar41 <- 0
 %newVar42 <- %acc + 24
 %newVar43 <- load %newVar42
 %newVar44 <- %newVar43 >> 1
 %newVar45 <- 1
 %newVar45 <- %newVar44 * %newVar45
 %newVar46 <- 0 * %newVar45
 %newVar41 <- %newVar46 + %newVar41
 %newVar41 <- %newVar41 + 1
 %newVar40 <- %newVar41 * 8
 %newVar40 <- %newVar40 + 32
 %newVar47 <- %acc + %newVar40
 store %newVar47 <- %n01
 %newVar49 <- 0
 %newVar50 <- %acc + 24
 %newVar51 <- load %newVar50
 %newVar52 <- %newVar51 >> 1
 %newVar53 <- 1
 %newVar53 <- %newVar52 * %newVar53
 %newVar54 <- 1 * %newVar53
 %newVar49 <- %newVar54 + %newVar49
 %newVar49 <- %newVar49 + 0
 %newVar48 <- %newVar49 * 8
 %newVar48 <- %newVar48 + 32
 %newVar55 <- %acc + %newVar48
 store %newVar55 <- %n10
 %newVar57 <- 0
 %newVar58 <- %acc + 24
 %newVar59 <- load %newVar58
 %newVar60 <- %newVar59 >> 1
 %newVar61 <- 1
 %newVar61 <- %newVar60 * %newVar61
 %newVar62 <- 1 * %newVar61
 %newVar57 <- %newVar62 + %newVar57
 %newVar57 <- %newVar57 + 1
 %newVar56 <- %newVar57 * 8
 %newVar56 <- %newVar56 + 32
 %newVar63 <- %acc + %newVar56
 store %newVar63 <- %n11
 return 
 
:B3
 %a <- %A00 * %B00
 %b <- %A01 * %B10
 %c <- %A00 * %B01
 %d <- %A01 * %B11
 %e <- %A10 * %B00
 %f <- %A11 * %B10
 %g <- %A10 * %B01
 %h <- %A11 * %B11
 %n00 <- %a + %b
 %n01 <- %c + %d
 %n10 <- %e + %f
 %n11 <- %g + %h
 br :Bend
}

